name: Spring Boot & Gradle CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - feature/refactor
  pull_request:
    branches:
      - main
      - dev
      - feature/refactor

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: microsoft

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Spring Security Key create
        env:
          NAVER_CLIENT_ID: ${{secrets.NAVER_CLIENT_ID}}
          NAVER_CLIENT_SECRET: ${{secrets.NAVER_CLIENT_SECRET}}
          JWT_SECRET: ${{secrets.JWT_SECRET_KEY}}
        run: |
          sed -i -r "s/^(NAVER_CLIENT_ID=).*/\1$NAVER_CLIENT_ID/" .env
          sed -i -r "s/^(NAVER_CLIENT_SECRET=).*/\1$NAVER_CLIENT_SECRET/" .env
          sed -i -r "s/^(JWT_SECRET=).*/\1$JWT_SECRET/" .env

      - name: Firebase Key create
        env:
          $FIREBASE_CREDENTIALS: ${{secrets.FIREBASE_SECRET_KEY}}
        run: |
          echo "$FIREBASE_CREDENTIALS" > src/main/resources/credentials.json

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Deploy to Linux server
        env:
          SSH_HOST: ${{secrets.SSH_HOST}}
          SSH_PORT: ${{secrets.SSH_PORT}}
          SSH_USER: ${{secrets.SSH_USER}}
          SSH_KEY: ${{secrets.SSH_KEY}}
        run: |
          echo "$SSH_KEY" > deploy_key
          chmod 600 deploy_key
          scp -P $SSH_PORT -i deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null build/libs/*.jar $SSH_USER@$SSH_HOST:/tmp/app.jar
          ssh -p $SSH_PORT -i deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SSH_USER@$SSH_HOST <<EOF
            cp /tmp/app.jar /opt/concheese/app.jar
            systemctl --user restart concheese-server
          EOF
          rm -f deploy_key

      - name: Make application-secret.yaml
        run: |
          cd ./src/main/resources
          touch ./application-secret.yaml
          echo "jwt:" >> ./application-secret.yaml
          echo "  secret: ${{ secrets.JWT_SECRET_KEY }}" >> ./application-secret.yaml
          echo "spring" >> ./application-secret.yaml
          echo "  security:" >> ./application-secret.yaml
          echo "    oauth2:" >> ./application-secret.yaml
          echo "      client:" >> ./application-secret.yaml
          echo "        registration:" >> ./application-secret.yaml
          echo "          naver:" >> ./application-secret.yaml
          echo "            client-id: ${{ secrets.NAVER_CLIENT_SECRET }}" >> ./application-secret.yaml
          echo "            client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}" >> ./application-secret.yaml
          echo "            scope: id, nickname, name, email" >> ./application-secret.yaml
          echo "            client-name: Naver" >> ./application-secret.yaml
          echo "            authorization-grant-type: authorization_code" >> ./application-secret.yaml
          echo "            redirect-uri: http://localhost:8080/login/oauth2/code/naver" >> ./application-secret.yaml
          echo "        provider:" >> ./application-secret.yaml
          echo "          naver:" >> ./application-secret.yaml
          echo "            authorization-uri: https://nid.naver.com/oauth2.0/authorize" >> ./application-secret.yaml
          echo "            token-uri: https://nid.naver.com/oauth2.0/token" >> ./application-secret.yaml
          echo "            user-info-uri: https://openapi.naver.com/v1/nid/me" >> ./application-secret.yaml
          echo "            user-name-attribute: response" >> ./application-secret.yaml